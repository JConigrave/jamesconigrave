if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
xox()
xox = function(){
require(ggplot2)
#  base = 3
#
# game_board <- ggplot(aes = aes(1:base, 1:base))  +
#    geom_vline(xintercept  = base/3) +
#    geom_vline(xintercept  = base/3*2) +
#    geom_hline(yintercept = base/3) +
#    geom_hline(yintercept = base/3*2) +
#    scale_x_continuous(limits = c(0.2,base-.2)) +
#    scale_y_continuous(limits = c(0.2, base-.2))
# print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner) {
console_board(game_data, "Where do you want to play [row, column]?")
user_input <-
readline(prompt = "")
made_move = 0
while (made_move == 0) {
if (!available(user_input)) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
console_board(game_data," ")
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
}
available = function(user_input){
is.na(eval(parse(text = glue::glue("game_data[{user_input}]"))))
}
# update_board = function(row, col, player = "B") {
#   row = 4 - row - .5
#   col = col - .5
#
#   if(player == "A"){
#     color = "blue"
#   } else{
#     color = "red"
#   }
#
#   game_board + geom_point(data = data.frame(x = col, y = row), aes(x, y),
#                           color = color, size = 10)
#
# }
check_winner = function(gd, player = "A", ai = TRUE) {
cols <- lapply(1:3, function(x) {
sum(gd[, x] == player, na.rm = T)
})
rows <- lapply(1:3, function(x) {
sum(gd[x, ] == player, na.rm = T)
})
diag1 <- sum(diag(gd) == player, na.rm = T)
diag2 = sum(c(gd[1, 3],
gd[2, 2],
gd[3, 1]) == player, na.rm = T)
if(ai){
return(max(unlist(c(cols,rows,diag1,diag2))))
}
if (any(c(cols, rows, diag1, diag2) == 3 )) {
if(player == "B"){
break
}
return(TRUE)
}else{
return(FALSE)
}
}
ai = function(gd){
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[which(results$score == 3)[1], ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
console_board = function(gb, status){
cat("\014")
cat("\n")
gb[is.na(gb)] = " "
gb[gb == "A"] = "X"
gb[gb == "B"] = "O"
gb = c(gb[1,], gb[2, ], gb[3, ])
board <- ("\r
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
|     |
...................
%s")
cat(do.call(sprintf, c(fmt = board, append(as.list(gb), status))))
}
xox()
xox = function(){
require(ggplot2)
#  base = 3
#
# game_board <- ggplot(aes = aes(1:base, 1:base))  +
#    geom_vline(xintercept  = base/3) +
#    geom_vline(xintercept  = base/3*2) +
#    geom_hline(yintercept = base/3) +
#    geom_hline(yintercept = base/3*2) +
#    scale_x_continuous(limits = c(0.2,base-.2)) +
#    scale_y_continuous(limits = c(0.2, base-.2))
# print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner) {
console_board(game_data, "Where do you want to play [row, column]?")
user_input <-
readline(prompt = "")
made_move = 0
while (made_move == 0) {
if (!available(game_data, user_input)) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
console_board(game_data," ")
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
}
available = function(game_data,user_input){
is.na(eval(parse(text = glue::glue("game_data[{user_input}]"))))
}
# update_board = function(row, col, player = "B") {
#   row = 4 - row - .5
#   col = col - .5
#
#   if(player == "A"){
#     color = "blue"
#   } else{
#     color = "red"
#   }
#
#   game_board + geom_point(data = data.frame(x = col, y = row), aes(x, y),
#                           color = color, size = 10)
#
# }
check_winner = function(gd, player = "A", ai = TRUE) {
cols <- lapply(1:3, function(x) {
sum(gd[, x] == player, na.rm = T)
})
rows <- lapply(1:3, function(x) {
sum(gd[x, ] == player, na.rm = T)
})
diag1 <- sum(diag(gd) == player, na.rm = T)
diag2 = sum(c(gd[1, 3],
gd[2, 2],
gd[3, 1]) == player, na.rm = T)
if(ai){
return(max(unlist(c(cols,rows,diag1,diag2))))
}
if (any(c(cols, rows, diag1, diag2) == 3 )) {
if(player == "B"){
break
}
return(TRUE)
}else{
return(FALSE)
}
}
ai = function(gd){
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[which(results$score == 3)[1], ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
console_board = function(gb, status){
cat("\014")
cat("\n")
gb[is.na(gb)] = " "
gb[gb == "A"] = "X"
gb[gb == "B"] = "O"
gb = c(gb[1,], gb[2, ], gb[3, ])
board <- ("\r
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
|     |
...................
%s")
cat(do.call(sprintf, c(fmt = board, append(as.list(gb), status))))
}
xox()
3,3
xox()
xox = function(){
require(ggplot2)
#  base = 3
#
# game_board <- ggplot(aes = aes(1:base, 1:base))  +
#    geom_vline(xintercept  = base/3) +
#    geom_vline(xintercept  = base/3*2) +
#    geom_hline(yintercept = base/3) +
#    geom_hline(yintercept = base/3*2) +
#    scale_x_continuous(limits = c(0.2,base-.2)) +
#    scale_y_continuous(limits = c(0.2, base-.2))
# print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner) {
console_board(game_data, "Where do you want to play [row, column]?")
user_input <-
readline(prompt = "")
made_move = 0
while (made_move == 0) {
if (!available(game_data, user_input)) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
console_board(game_data," ")
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
}
available = function(game_data,user_input){
is.na(eval(parse(text = glue::glue("game_data[{user_input}]"))))
}
# update_board = function(row, col, player = "B") {
#   row = 4 - row - .5
#   col = col - .5
#
#   if(player == "A"){
#     color = "blue"
#   } else{
#     color = "red"
#   }
#
#   game_board + geom_point(data = data.frame(x = col, y = row), aes(x, y),
#                           color = color, size = 10)
#
# }
check_winner = function(gd, player = "A", ai = TRUE) {
cols <- lapply(1:3, function(x) {
sum(gd[, x] == player, na.rm = T)
})
rows <- lapply(1:3, function(x) {
sum(gd[x, ] == player, na.rm = T)
})
diag1 <- sum(diag(gd) == player, na.rm = T)
diag2 = sum(c(gd[1, 3],
gd[2, 2],
gd[3, 1]) == player, na.rm = T)
if(ai){
return(max(unlist(c(cols,rows,diag1,diag2))))
}
if (any(c(cols, rows, diag1, diag2) == 3 )) {
if(player == "B"){
break
}
return(TRUE)
}else{
return(FALSE)
}
}
ai = function(gd){
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[which(results$score == 3)[1], ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
console_board = function(gb, status){
cat("\014")
flush.console()
cat("\n")
gb[is.na(gb)] = " "
gb[gb == "A"] = "X"
gb[gb == "B"] = "O"
gb = c(gb[1,], gb[2, ], gb[3, ])
board <- ("\r
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
|     |
...................
%s")
cat(do.call(sprintf, c(fmt = board, append(as.list(gb), status))))
}
available::available("xox")
usethis::use_package("C:/Users/james/Dropbox (Sydney Uni)/9_Functions/Packages/xox")
usethis::create_package("C:/Users/james/Dropbox (Sydney Uni)/9_Functions/Packages/xox")
?utils::select.list()
library(jamesconigrave)
md = system.file("to_github/jamesconigrave_resume.rmd", package = "jamesconigrave")
gh = system.file("to_github", package = "jamesconigrave")
gh
!dir.exists(paste0(gh,"/.git"))
paste(glue::glue("cd {gh}")
glue::glue("cd {gh}"),
"git clone https://github.com/JConigrave/resume.git"
paste(glue::glue("cd {gh}"),
"git clone https://github.com/JConigrave/resume.git"
shell(paste(glue::glue("cd {gh}"),
"git clone https://github.com/JConigrave/resume.git",
glue::glue("git config user.password {username}"),
glue::glue("git config user.password {pass}"),
sep = "&"))
if(!dir.exists(paste0(gh,"/.git"))){
message("git dir doesn't exist, initialising... ",glue::glue("{gh}"))
shell(paste(glue::glue("cd {gh}"),
"git clone https://github.com/JConigrave/resume.git",
glue::glue("git config user.password {username}"),
glue::glue("git config user.password {pass}"),
sep = "&"))
}
pass = shell("git config --global user.password", intern = TRUE)
username = shell("git config --global user.name", intern = TRUE)
if(!dir.exists(paste0(gh,"/.git"))){
message("git dir doesn't exist, initialising... ",glue::glue("{gh}"))
shell(paste(glue::glue("cd {gh}"),
"git clone https://github.com/JConigrave/resume.git",
glue::glue("git config user.password {username}"),
glue::glue("git config user.password {pass}"),
sep = "&"))
}
if(!dir.exists(paste0(gh,"/.git"))){
message("git dir doesn't exist, initialising... ",glue::glue("{gh}"))
shell(paste(glue::glue("cd {gh}"),
"git init",
"git clone https://github.com/JConigrave/resume.git",
glue::glue("git config user.password {username}"),
glue::glue("git config user.password {pass}"),
sep = "&"))
}
!dir.exists(paste0(gh,"/.git"))
message("git dir doesn't exist, initialising... ",glue::glue("{gh}"))
shell(paste(glue::glue("cd {gh}"),
"git init",
"git clone https://github.com/JConigrave/resume.git",
glue::glue("git config user.password {username}"),
glue::glue("git config user.password {pass}"),
sep = "&"))
gh
gh
gh
library(jamesconigrave)
library(jamesconigrave)
jamesconigrave::update_resume()
papers <- list.files(system.file("papers",  package= "jamesconigrave"))
papers
select.list(
choices = papers
)
?choices
utils::select.list()
?utils::select.list()
select.list(
title = "What paper would you like to open?",
choices = papers
)
path <- select.list(
title = "What paper would you like to open?",
choices = papers
)
path
dir <- system.file("papers",  package= "jamesconigrave")
dir
papers <- list.files(dir)
system(glue::glue("{dir}/{path}"))
shell.exec(glue::glue("{dir}/{path}"))
stop::update_git("add papers function")
library(jamesconigrave)
stop::update_git("add papers function")
library(jamesconigrave)
jamesconigrave::update_resume()
jamesconigrave:::papers()
library(jamesconigrave)
jamesconigrave::update_resume()
stop::explore_wd()
stop::update_git("added optional scholarship section")
